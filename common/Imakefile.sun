XCOMM
XCOMM This defines a rule to make the message
XCOMM header file 'msant_strings.h'
#define stringRule(name)  @@\
STRN_H = name.h@@\
STRN_C = name.c@@\
/**/#@@\
/**/## make gibt newlines nicht weiter, deshalb @@\
/**/## der trick mit tr@@\
/**/## $ und " muessen escaped werden@@\
SEDSCR=\@@\
1 i\%\@@\
\#ifndef _string_file_h_\%\@@\
\#define _string_file_h_\%\@@\
/* This is automatically created by "make";\%\@@\
\ * do not edit.\%\@@\
\ */%\@@\
$$a\%\@@\
\#endif%\@@\
/^char/!D%\@@\
s/^char/extern &/%\@@\
s/=.*$$/;/@@\
includes:: $(STRN_H)@@\
clean:: @@\
	rm  -f $(STRN_H)@@\
$(STRN_H):	$(STRN_C)@@\
	rm  -f $(STRN_H)@@\
	sed -e "`echo '$(SEDSCR)' | tr % '\012' `" < $(STRN_C) >$(STRN_H)

XCOMM  
XCOMM This specifies, if the current calculation
XCOMM is performed by direct matrix multiplication
XCOMM or by an iterative method (not recommended, alpha)
XCOMM

MULT_OR_ITER = -DDIREKT

CSOURCE = CBstrom.c Malloc.c PBuffer.c basics.c calc.c feld.c fileop.c\
	  graf.c intr.c lists.c msant_strings.c nahkop.c punkte.c\
	  bitmod.c

FSOURCE = gcontr.f


#ifndef HasXTutil
CSOURCE += CrtIcWin.c
#endif

SRCS =  $(CSOURCE) $(FSOURCE)
OBJS =  $(CSOURCE:%.c=%.o) $(FSOURCE:%.f=%.o)

NormalLibraryTarget(msant,$(OBJS))
NormalFortranObjectRule()
stringRule(msant_strings)
SpecialObjectRule(CBstrom.o,,$(MULT_OR_ITER))
SpecialObjectRule(bitmod.o,,-O4)
DependTarget()
